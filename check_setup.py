import os
import sys
import importlib.util
import subprocess

def check_module(module_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –º–æ–¥—É–ª—å"""
    if importlib.util.find_spec(module_name) is not None:
        print(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    else:
        print(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_env_vars():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ["TELEGRAM_TOKEN", "OPENAI_API_KEY", "TAVILY_API_KEY"]
    missing_vars = []
    
    from dotenv import load_dotenv
    load_dotenv()
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
        return True

def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt"""
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        import sqlite3
        conn = sqlite3.connect("dialogs.db")
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–∏–∞–ª–æ–≥–æ–≤
        cursor.execute("""
        SELECT name FROM sqlite_master
        WHERE type='table' AND name='dialogs'
        """)
        
        if not cursor.fetchone():
            print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤...")
            cursor.execute("""
            CREATE TABLE dialogs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                timestamp TEXT,
                user_message TEXT,
                bot_message TEXT
            )
            """)
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ dialogs —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ dialogs —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

def check_api_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ API —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API
    try:
        import openai
        from openai import OpenAI
        
        client = OpenAI()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Hello!"}],
            max_tokens=5
        )
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ OpenAI API: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tavily API
    try:
        from tavily import TavilyClient
        
        client = TavilyClient(api_key=os.getenv("TAVILY_API_KEY"))
        search_result = client.search(query="test query", search_depth="basic", max_results=1)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tavily API —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Tavily API: {str(e)}")

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ AI Therapy MCP")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python-–≤–µ—Ä—Å–∏–∏
    print(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python {sys.version}")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_requirements()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    required_modules = [
        "aiogram", "langchain", "openai", "dotenv", "tavily", 
        "streamlit", "sqlite3", "pydantic", "langsmith"
    ]
    
    all_modules_installed = all(check_module(module) for module in required_modules)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars_ok = check_env_vars()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_ok = check_database()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API
    check_api_access()
    
    print("=" * 50)
    if all_modules_installed and env_vars_ok and db_ok:
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
        print("üåê –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–æ–π: streamlit run webapp.py")
    else:
        print("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main() 