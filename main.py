import os
import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters.command import Command
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LangChain –∏ –∞–≥–µ–Ω—Ç–∞–º–∏
from agents.therapist_agent import TherapistAgent
from agents.observer_agent import ObserverAgent
from agents.corrector_agent import CorrectorAgent

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π API
required_env_vars = ["TELEGRAM_TOKEN", "OPENAI_API_KEY", "TAVILY_API_KEY"]
for var in required_env_vars:
    if not os.getenv(var):
        raise ValueError(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {var} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

dialogue_history = []

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø AI-—Ç–µ—Ä–∞–ø–µ–≤—Ç. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç.")

@dp.message()
async def handle_message(message: Message):
    global current_prompt

    client_input = message.text
    current_dialog = {"user_message": client_input}
    dialogue_history.append(current_dialog)

    # –û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞
    psych_response = await psych_chain.generate_response(
        user_message=client_input, 
        dialog_history=dialogue_history
    )
    current_dialog["bot_message"] = psych_response
    await message.answer(psych_response)

    # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å
    history_text = []
    for entry in dialogue_history[-6:]:
        if "user_message" in entry:
            history_text.append(f"–ö–ª–∏–µ–Ω—Ç: {entry['user_message']}")
        if "bot_message" in entry:
            history_text.append(f"–ü—Å–∏—Ö–æ–ª–æ–≥: {entry['bot_message']}")
    
    dialogue_text = "\n".join(history_text)
    observer_output = await observer_chain.run(dialogue=dialogue_text)

    # –ö–æ—Ä—Ä–µ–∫—Ç–æ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è)
    if "–æ—à–∏–±–∫–∞" in observer_output.lower() or "–ø—Ä–æ–±–ª–µ–º–∞" in observer_output.lower():
        new_prompt = await rewriter_chain.run(
            old_prompt=current_prompt, 
            analysis=observer_output
        )
        current_prompt = new_prompt
        await message.answer(
            "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö. –ü—Ä–æ–º–ø—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª—ë–Ω."
        )

@dp.message(Command("search"))
async def handle_search_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. "
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /search –º–µ—Ç–æ–¥–∏–∫–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏"
        )
        return
    
    search_query = command_args[1]
    await message.answer(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
    from search_tool import get_search_tool
    search_tool = get_search_tool()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        def run_search():
            return search_tool.run(search_query)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        result = await asyncio.to_thread(run_search)
        await message.answer(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    global psych_chain, observer_chain, rewriter_chain, current_prompt
    
    # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
    current_prompt = """
    –í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º, 
    –ø—Ä–æ—è–≤–ª—è—è —ç–º–ø–∞—Ç–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ç–µ—Ä–∞–ø–∏–∏.
    """
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    therapist = TherapistAgent(logger=logger)
    observer = ObserverAgent(logger=logger)
    corrector = CorrectorAgent(logger=logger)
    
    psych_chain = therapist
    observer_chain = observer
    rewriter_chain = corrector
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())